function [smib_tor] = smib_tor_mod(smib,tor,tor_mod_con)
% Syntax: [smib_tor] = smib_tor_mod(smib,tor)
% May 19, 2022
% Purpose: Start from a linearized model of a single-machine infinite-bus
%          (SMIB) system and insert the torsional model for the generator
%
% Input: tor -- this is the ABCD representation of the torsional
%                       model, as generated by tor_mod.m
%        smib.a_mat  -- the linearized model of the smib system as generated by
%                       svm_mgen (and bundle_smib)
%
% Output: smib_tor_lin_mod -- a state-space object containing the linear
%                             model with the torsional model for the generator
%
% Files:
%
% See Also: tor_mod_data.m, tor_mod.m
%
% (c) Copyright 2022 Joe H. Chow - All Rights Reserved
% History (in reverse chronological order)

a_mat = smib.a_mat;
n = size(a_mat,1);                            % a_mat is nxn

% Break up a_mat
A22 = a_mat(3:n,3:n);
Ks = a_mat(2,1);                              % synch torque coeff/gen mass
Kd = a_mat(2,2);                              % damp torque coeff/gen mass
Pe_row = a_mat(2,3:n);                        % Pe/gen mass
delta_col = a_mat(3:n,1);

% total inertia
M = sum(tor_mod_con.M);
n_mass = tor_mod_con.n_mass;

% generator section
Pe_idx = tor_mod_con.n_Pe;                    % generator section number
gen_mass = tor_mod_con.M(Pe_idx);

% Insert torsional model into SMIB linearized model
A11 = tor.a_mat;
A11(n_mass+Pe_idx,Pe_idx) = A11(n_mass+Pe_idx,Pe_idx) + Ks*M/gen_mass;
A11(n_mass+Pe_idx,n_mass+Pe_idx) = A11(n_mass+Pe_idx,n_mass+Pe_idx) + Kd*M/gen_mass;
A12 = zeros(2*n_mass,n-2);
A12(n_mass+Pe_idx,:) = Pe_row*M/gen_mass;
A21 = zeros(n-2,2*n_mass);
A21(:,Pe_idx) = delta_col;

a_mat = [A11 A12; A21 A22];
n = size(a_mat,1);                            % a_mat is nxn

% exciter input
b_vr = zeros(n,1);
b_vr(end-length(smib.b_vr)+1:end) = smib.b_vr;

% electrical power
c_p = zeros(size(smib.c_p,1),n);
c_p(:,[1,2*n_mass]) = smib.c_p(:,[1,2]);
c_p(:,end-length(smib.c_p(1,:))+3:end) = smib.c_p(:,3:end);

% generator speed (front standard speed)
c_spd = zeros(1,n);
c_spd(2*n_mass) = 1;

% rear standard speed
c_spd_rear = zeros(1,n);
c_spd_rear(1+n_mass) = 1;

% bundling the output struct
smib_tor.a_mat = a_mat;
smib_tor.b_vr = b_vr;
smib_tor.c_p = c_p;
smib_tor.c_spd = c_spd;
smib_tor.c_spd_rear = c_spd_rear;

end  % function end

% eof
